#!/usr/bin/env python3

import fileinput
from itertools import combinations, permutations

from z3 import And, Implies, Int, Optimize, Or

# Optimizer initialization
opt = Optimize()

with fileinput.input() as sms:
    # Number of tasks, parameters and dependencies
    n = int(sms.readline().strip('\n'))
    pars = dict.fromkeys(range(1, n + 1))
    deps = dict.fromkeys(range(1, n + 1))

    for l in range(1, n + 1):
        # Current task info
        task = list(map(int, sms.readline().split()))

        # Format: (r, p, d, k, list of fragments)
        pars[l] = tuple(task[:4] + [task[4:]])
    
    for l in range(1, n + 1):
        # Ignore first digit, correspondent to the number of dependencies
        deps[l] = list(map(int, sms.readline().split()[1:]))

# Timing functions
est = lambda l, i: pars[l][0] + sum(pars[l][4][:i - 1])
lct = lambda l, i: pars[l][2] - sum(pars[l][4][i:])

# C1: first fragment of every task must start after ready time
for l in range(1, n + 1):
    opt.add(Int(f's_{l},1') >= pars[l][0])

# C2: sequential execution of fragments
for l in range(1, n + 1):
    for i in range(1, pars[l][3]):
        # Remark: pars[l][4][i - 1] is the execution time of fragment (l, i)
        opt.add(Int(f's_{l},{i + 1}') >= Int(f's_{l},{i}') + pars[l][4][i - 1])

# Fragment generator
domain = ((l, i)
    for l in range(1, n + 1)
    for i in range(1, pars[l][3] + 1))
# C3: no fragment overlapping
for ((l, i), (k, j)) in combinations(domain, 2):
    if (k != l and k not in deps[l] and l not in deps[k] and
        est(k, j) < lct(l, i) and est(l, i) < lct(k, j)):
        opt.add(Or(
            Int(f's_{k},{j}') >= Int(f's_{l},{i}') + pars[l][4][i - 1],
            Int(f's_{l},{i}') >= Int(f's_{k},{j}') + pars[k][4][j - 1])
        )

# C4: if task l depends on task k, l must start after k
# Remark: 'sl1' is not set to +oo; forcing l to start after its
# deadline is enough
for l in range(1, n + 1):
    for k in deps[l]:
        opt.add(And(
            Int(f's_{l},1') >= Int(f's_{k},{pars[k][3]}') + pars[k][4][-1],
            Or(
                Int(f's_{k},{pars[k][3]}') + pars[k][4][-1] <= pars[k][2],
                Int(f's_{l},1') > pars[l][2])
            )
        )

# C5: each task must be completed by its deadline
for l in range(1, n + 1):
    opt.add_soft(Int(f's_{l},{pars[l][3]}') + pars[l][4][-1] <= pars[l][2])

# Find a solution
opt.check()
model = opt.model()

# Auxiliary variables
scheduled = 0
schedule = dict()

# Solution interpretation
for l in range(1, n + 1):
    if model.eval(Int(f's_{l},{pars[l][3]}') + pars[l][4][-1] <= pars[l][2]):
        scheduled += 1
        schedule[f'{l}'] = [model.eval(Int(f's_{l},{i}')).as_string()
            for i in range(1, pars[l][3] + 1)]

# Generate output
output = f'{scheduled}\n'
for (l, t) in schedule.items():
    output += f'{l} ' + ' '.join(t) + '\n'

# Print output to stdout
print(output.rstrip('\n'))
